services:
  mongodb_go:
    image: mongo:latest
    container_name: mongodb_container_go
    ports:
      - "27018:27017"
    command: mongod --noauth
    volumes:
      - microtaller2_mongodb_data:/data/db
    networks:
      - microtaller_network

  api:
    build: ./app
    container_name: go_api_container
    ports:
      - "8080:8080"
    depends_on:
      - mongodb_go
    environment:
      MONGO_URI: mongodb://mongodb_go:27017/logs  
      MONGO_DB: logs
      RABBITMQ_HOST: amqp://guest:guest@rabbitmq:5672/
      RABBITMQ_QUEUE: logs_queue
      JWT_SECRET_KEY: your_secret_key
    networks:
      - microtaller_network

  mongodb_py:
    image: mongo:latest
    container_name: mongodb_container_py
    ports:
      - "27017:27017"
    command: mongod --noauth
    volumes:
      - micro_mongodb_data_py:/data/db
    networks:
      - microtaller_network

  logs_service:
    build: ./logs_service
    container_name: python_logs_service
    ports:
      - "5000:5000"
    depends_on:
      - mongodb_py
    environment:
      MONGO_URI: mongodb://mongodb_py:27017/logs
      MONGO_DB: logs
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_QUEUE: logs_queue
      JWT_SECRET_KEY: your_secret_key
    networks:
      - microtaller_network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microtaller_network

  health_service:
    build: ./health-check
    container_name: rust_health_service
    ports:
      - "8081:8081"
    depends_on:
      - mysql_db
      - api
      - logs_service
    environment:
      USER_SERVICE_URL: http://go_api_container:8080/health
      LOG_SERVICE_URL: http://python_logs_service:5000/health
      DATABASE_URL: mysql://root:password@mysql_db:3306/health_db
    networks:
      - microtaller_network

  mysql_db:
    image: mysql:latest
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: health_db
    ports:
      - "3306:3306"
    networks:
      - microtaller_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  microtaller2_mongodb_data:
    external: true  
  micro_mongodb_data_py:
    external: false  

networks:
  microtaller_network:
    driver: bridge